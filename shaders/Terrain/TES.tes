#version 450 core

layout(triangles, equal_spacing, ccw) in;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform sampler2D heightMap;
uniform float scale;
uniform int octaves;
uniform vec3 camPos;
uniform vec4 plane;

in vec3 posTC[];
in vec2 texCoordsTC[];

out vec3 normES;
out vec3 posES;
out vec2 texCoordsTE;
out float vis;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2);
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2);
float noise(vec3 pos,int octaves);
float hash(float x);
float sNoise(vec3 x);

uniform int gridSize;

void main()
{
	float triangleSize= gridSize/gl_TessLevelInner[0];
	posES = interpolate3D(posTC[0],posTC[1],posTC[2]);

	
	texCoordsTE=interpolate2D(texCoordsTC[0], texCoordsTC[1],texCoordsTC[2]);
	float height= texture(heightMap,texCoordsTE).r;

	posES.y=noise(posES,octaves);

	//directions
	float r=noise(posES + vec3(triangleSize,0.f,0.f),octaves)* scale; //right
	float l=noise(posES + vec3(-triangleSize,0.f,0.f),octaves)* scale; //left
	float u=noise(posES + vec3(0.f,0.f,triangleSize),octaves)* scale; //up
	float d=noise(posES + vec3(0.f,0.f,-triangleSize),octaves)* scale; //down

	float lr=l-r;
	float ud=u-d;
	normES=normalize(vec3(lr,2.f,ud));
	
	gl_Position=projection*view*vec4(posES,1.f);
	gl_ClipDistance[0]=dot(vec4(posES,1.f),plane);

	float distFromCamera = distance(camPos,posES);
	vis=exp(-pow((distFromCamera*0.005f),1.2f));
	vis= clamp(vis,0.f,1.f);
}
//2D interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
return vec2(gl_TessCoord.x)* v0 + vec2(gl_TessCoord.y) *v1 + vec2(gl_TessCoord.z) *v2;
}
//3D interpolation
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
	return vec3(gl_TessCoord.x)* v0 + vec3(gl_TessCoord.y) *v1 + vec3(gl_TessCoord.z) *v2;
}
float noise(vec3 pos,int octaves)
{
	float total = 0.f;
	float freq = 0.0075f;
	float maxAmp= 0.f;
	float amp=50.f;
	for(int i=0; i<octaves;i++)
	{
		total +=sNoise(pos *freq)*amp;
		freq*=2.f;
		amp/=2.f;
		maxAmp +=amp;
	}
	return(total/maxAmp)*scale;

}
float hash(float x)
{
	return fract(sin(x)*714.9824053f);
}
float sNoise(vec3 x)
{
	vec3 p=floor(x);
	vec3 f=fract(x);

	f=f*f*(3.f-(2.f*f));

	float n=p.x+p.y*157.f + 113.f*p.z;
	return	mix(mix(mix(hash(n + 0.0f), hash(n + 1.0f), f.x),
			mix(hash(n + 157.0f), hash(n + 158.0f), f.x), f.y),
			mix(mix(hash(n + 113.0f), hash(n + 114.0f), f.x),
			mix(hash(n + 270.0f), hash(n + 271.0f), f.x), f.y), f.z);
}